import os
import time
import threading
import pandas as pd
import numpy as np
from datetime import datetime
from dotenv import load_dotenv
from binance.client import Client
from binance.enums import SIDE_BUY, SIDE_SELL, ORDER_TYPE_MARKET
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import EMAIndicator, MACD, ADXIndicator
import requests
import logging

# ÏÑ§Ï†ïÍ∞í
RR_RATIO = 1.3           # Î¶¨Ïä§ÌÅ¨-Î¶¨ÏõåÎìú ÎπÑÏú® 1:1.3
LEVERAGE = 10
SLEEP_INTERVAL = 10      # 10Ï¥à ÎåÄÍ∏∞
MAX_CONCURRENT = 1       # ÎèôÏãú 1Ìè¨ÏßÄÏÖò

# ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
load_dotenv()
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Binance client ÏÉùÏÑ±
client = Client(API_KEY, API_SECRET)

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(filename='trade_log.txt', level=logging.INFO, format='%(asctime)s - %(message)s')
def log(msg):
    print(msg)
    logging.info(msg)

def send_telegram(msg):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": msg}, timeout=10)
    except Exception as e:
        print(f"Telegram error: {e}")

# Ïã¨Î≥º Î¶¨Ïä§Ìä∏ (25Í∞ú)
symbols = [
    "BTCUSDT","ETHUSDT","BNBUSDT","SOLUSDT","ADAUSDT",
    "XRPUSDT","DOGEUSDT","DOTUSDT","MATICUSDT","LTCUSDT",
    "LINKUSDT","UNIUSDT","BCHUSDT","ETCUSDT","XLMUSDT",
    "AAVEUSDT","MKRUSDT","COMPUSDT","SUSHIUSDT","AVAXUSDT",
    "FILUSDT","ATOMUSDT","EOSUSDT","THETAUSDT","TRXUSDT"
]

current_positions = 0
positions_lock = threading.Lock()

# Îç∞Ïù¥ÌÑ∞ ÌîÑÎ†àÏûÑ Î°úÎìú Î∞è ÏßÄÌëú Í≥ÑÏÇ∞
def get_df(symbol, interval):
    klines = client.futures_klines(symbol=symbol, interval=interval, limit=100)
    df = pd.DataFrame(klines, columns=["t","o","h","l","c","v","ct","qav","nt","tbb","tbq","i"])
    for col in ["o","h","l","c"]:
        df[col] = df[col].astype(float)
    df['rsi']   = RSIIndicator(df['c'], window=14).rsi()
    df['macd']  = MACD(df['c']).macd_diff()
    df['ema9']  = EMAIndicator(df['c'], window=9).ema_indicator()
    df['adx']   = ADXIndicator(df['h'], df['l'], df['c'], window=14).adx()
    df['stoch'] = StochasticOscillator(df['h'], df['l'], df['c'], window=14).stoch()
    return df

# ÏßÑÏûÖ Ïã†Ìò∏ ÌåêÎã® (Í∏∞Ï§Ä ÏôÑÌôî)
def check_signal(df):
    last = df.iloc[-1]
    if last['adx'] < 10:
        return None
    if last['rsi'] < 42 and last['macd'] > 0 and last['c'] > last['ema9'] and last['stoch'] < 50:
        return 'LONG'
    if last['rsi'] > 58 and last['macd'] < 0 and last['c'] < last['ema9'] and last['stoch'] > 50:
        return 'SHORT'
    return None

# ÏûîÍ≥† Ï°∞Ìöå
def get_balance():
    for b in client.futures_account_balance():
        if b['asset'] == 'USDT':
            return float(b['balance'])
    return 0.0

# Ï£ºÎ¨∏ ÏàòÎüâ Í≥ÑÏÇ∞ (high:80%, low:20%)
def calc_qty(price, confidence):
    bal = get_balance()
    alloc = bal * (0.8 if confidence == 'high' else 0.2)
    return round(alloc / price, 6)

# Î∞òÎåÄ Î∞©Ìñ• ÏãúÍ∑∏ÎÑê ÌôïÏù∏ ÌõÑ ÌÉàÏ∂ú ÌåêÎã®
def opposite_signal(df, current_side):
    signal = check_signal(df)
    return (current_side == 'LONG' and signal == 'SHORT') or (current_side == 'SHORT' and signal == 'LONG')

# ÏãúÏû•Í∞Ä ÏßÑÏûÖ Î∞è TP/SL ÏÑ§Ï†ï
def execute_trade(symbol, side, price, confidence):
    global current_positions
    qty = calc_qty(price, confidence)
    client.futures_change_leverage(symbol=symbol, leverage=LEVERAGE)
    order_side = SIDE_BUY if side == 'LONG' else SIDE_SELL
    client.futures_create_order(symbol=symbol, side=order_side, type=ORDER_TYPE_MARKET, quantity=qty)

    sl_price = price * (0.98 if side == 'LONG' else 1.02)
    rr_dist = abs(price - sl_price) * RR_RATIO
    tp_price = price + rr_dist if side == 'LONG' else price - rr_dist

    client.futures_create_order(symbol=symbol,
                                side=SIDE_SELL if side=='LONG' else SIDE_BUY,
                                type="TAKE_PROFIT_MARKET",
                                stopPrice=round(tp_price,2), closePosition=True)
    client.futures_create_order(symbol=symbol,
                                side=SIDE_SELL if side=='LONG' else SIDE_BUY,
                                type="STOP_MARKET",
                                stopPrice=round(sl_price,2), closePosition=True)

    msg = f"{symbol} {side} ÏßÑÏûÖ @{price:.2f} | TP:{tp_price:.2f}, SL:{sl_price:.2f} ({confidence})"
    send_telegram(msg)
    log(msg)
    with positions_lock:
        current_positions += 1

    # Î∞òÎåÄ ÏãúÍ∑∏ÎÑê ÌôïÏù∏ Î£®ÌîÑ
    while True:
        df_check = get_df(symbol, '30m')
        if opposite_signal(df_check, side):
            client.futures_create_order(symbol=symbol,
                                        side=SIDE_SELL if side=='LONG' else SIDE_BUY,
                                        type=ORDER_TYPE_MARKET,
                                        quantity=qty)
            msg = f"{symbol} Î∞òÎåÄ ÏãúÍ∑∏ÎÑê Î∞úÏÉùÏúºÎ°ú Ï≤≠ÏÇ∞"
            send_telegram(msg)
            log(msg)
            with positions_lock:
                current_positions -= 1
            break
        time.sleep(1)

# Î©îÏù∏ Ïã§Ìñâ
if __name__ == '__main__':
    print("üîÆ Bot started (ÏôÑÌôîÎêú Í∏∞Ï§Ä, 25Í∞ú Ïã¨Î≥º, Î∞òÎåÄÏãúÍ∑∏ÎÑê ÌÉàÏ∂ú Ìè¨Ìï®)")
    send_telegram("ü§ñ Bot started: 30m/1h Ïã†Ìò∏ Í∏∞Î∞ò")

    while True:
        print(f"[{datetime.now():%H:%M:%S}] ÏÉà ÏÇ¨Ïù¥ÌÅ¥ ÏãúÏûë...")
        for symbol in symbols:
            with positions_lock:
                if current_positions >= MAX_CONCURRENT:
                    break
            df_30m = get_df(symbol, '30m')
            df_1h  = get_df(symbol, '1h')
            sig30  = check_signal(df_30m)
            sig1h  = check_signal(df_1h)
            price  = float(client.futures_mark_price(symbol=symbol)['markPrice'])

            if sig30 and sig30 == sig1h:
                execute_trade(symbol, sig30, price, 'high')
                break
            elif sig30 and not sig1h:
                execute_trade(symbol, sig30, price, 'low')
                break
            elif sig1h and not sig30:
                execute_trade(symbol, sig1h, price, 'low')
                break

        time.sleep(SLEEP_INTERVAL)
